@using Influence.Domain
@using Newtonsoft.Json
@model Influence.Web.Models.SessionModel
@{
    var session = Model.Session;
    if (session == null)
    {
        Response.Redirect("/");
        return;
    }
}

<h1>Session: @session.Name</h1>
@session.Id
<br />

@if (!session.IsTournamentSession && session.GameState.GamePhase == Consts.GamePhase.NotStarted)
{
    <br />
    <button class="btnStartGame">Start game</button>
}

<div id="sessionContainer">

    <table>
        
        <tr>
            <td>Type</td>
            <td>@(session.IsTournamentSession ? "Tournament" : "Regular")</td>
        </tr>        
        
        <tr>
            <td colspan="2" style="height: 15px"></td>
        </tr>

        <tr>
            <td>Players</td>
            <td>
                @foreach (var player in session.Players)
                {
                    <span style="color: rgb(@player.ColorRgbCsv)">
                        @player.Name
                    </span>
                }
            </td>
        </tr>

        <tr>
            <td colspan="2" style="height: 15px"></td>
        </tr>

        <tr>
            <td>Round</td>
            <td>@session.RoundNumber</td>
        </tr>

        <tr>
            <td>State</td>
            <td>@session.GameState.GamePhase</td>
        </tr>

        <tr>
            <td colspan="2" style="height: 15px"></td>
        </tr>

    </table>
    
    
    @if (session.GameState.GamePhase == Consts.GamePhase.Finished)
    {
        <br>
        <strong>Delay between actions:</strong><br>
        <input id="txtDelay" type="number" value="250" min="10" max="10000" step="10" /> @:ms
        <br /><br>
        <button class="btnViewGame" data-boardsize="@session.CurrentBoard.Size" data-eventbatches="@JsonConvert.SerializeObject(session.GameEventHistory.EventBatches)">View game!</button>
    }


    @if (session.CurrentBoard != null)
    {
        <table id="tableBoard">
            @for (int y = 0; y < session.CurrentBoard.Size; y++)
            {
                <tr>
                    @for (int x = 0; x < session.CurrentBoard.Size; x++) {
                        <td class="tile"></td>
                    }
                </tr>
            }
        </table>
    }
</div>

@if (session.GameState.GamePhase == Consts.GamePhase.NotStarted && !session.IsTournamentSession)
{
    <br />
    <br />
    <h1>Add players to this game</h1>
    <table>
        @foreach (var bot in Model.AvailableBots)
        {
            <tr>
                <td><button class="btnJoinBot" data-foldername="@bot.FolderName">Request to join</button></td>
                <td>@bot.Name</td>
                <td>@bot.FolderName</td>
            </tr>
        }
    </table>
}

<script src="/Scripts/jquery-3.3.1.min.js"></script>
<script>

    $(document).ready(function () {

        $(".btnStartGame").click(function () {
            $.get("/Session/StartGame?sessionId=@Model.Session.Id", function(response) { location.reload(); });
        });
        
        
        function getTileIdx(boardsize, x, y)
        {
            return x + (y * boardsize);
        }
        
        
        function updateTile(tile, evt){
            console.log("(" + evt.X + ", " + evt.Y + ") needs an update: ");
            console.log(tile);
            console.log(" ");
            
            var rgb = "rgb(" + evt.OwnerColorRgbCsv + ")";
            $(tile).css("background", rgb);
            
            $(tile).text(evt.NumTroops);
        }
        
        function getDelay() 
        {
            return parseInt($("#txtDelay").val());
        }
        
        function drawState(eventbatches, tiles, boardsize, index) 
        {
            $(eventbatches[index].Events).each(function(idx, evt)
            {
                var tile = tiles[getTileIdx(boardsize, evt.X, evt.Y)];
                updateTile(tile, evt)
            });
            
            if (index < eventbatches.length)
                setTimeout( () => drawState(eventbatches, tiles, boardsize, index+1), getDelay());
        }
        
        $(".btnViewGame").click(function () {
            
            var eventbatches = $($(this).data('eventbatches'));
            var boardsize = $(this).data("boardsize");
            var tiles = $("#tableBoard .tile");
            drawState(eventbatches, tiles, boardsize, 0)
        });
        
        

        $(".btnJoinBot").click(function() {
            var folderName = $(this).data("foldername");
            console.log(folderName);
            $.get("/Session/JoinBot?folderName=" + folderName + "&sessionId=@Model.Session.Id");
        });
    });

</script>